// RUN: %target-sil-opt %s | %FileCheck %s

// RUN: %empty-directory(%t)
// RUN: %target-sil-opt %s -emit-sib -o %t/tmp.sib -module-name autodiff_function
// RUN: %target-sil-opt %t/tmp.sib -o %t/tmp.2.sib -module-name autodiff_function
// RUN: %target-sil-opt %t/tmp.2.sib -module-name autodiff_function | %FileCheck %s

sil_stage raw

import Swift
import Builtin

// A pullback function mimicking those generated by the compiler.
// Parameters are a vector (vector-Jacobian products) and pullback struct value.
sil hidden @foo_pb : $@convention(thin) (@in_guaranteed Float, Float, Float) -> @out Float {
bb0(%0 : $*Float, %1 : $*Float, %2 : $Float, %3 : $Float):
  copy_addr %1 to %0 : $*Float
  %void = tuple ()
  return %void : $()
}

// The original function with an attribute that specifies the compiler-emitted pullback.
sil hidden [differentiable source 0 wrt 0 vjp @foo_vjp] @foo : $@convention(thin) (Float) -> Float {
bb0(%0 : $Float):
  return %0 : $Float
}

// The vector-Jacobian product function, which returns the original result and a pullback.
sil hidden @foo_vjp : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float) {
bb0(%0 : $Float):
  %1 = function_ref @foo : $@convention(thin) (Float) -> Float
  %2 = apply %1(%0) : $@convention(thin) (Float) -> Float
  %3 = function_ref @foo_pb : $@convention(thin) (@in_guaranteed Float, Float, Float) -> @out Float
  %4 = partial_apply [callee_guaranteed] %3(%0, %2) : $@convention(thin) (@in_guaranteed Float, Float, Float) -> @out Float
  %5 = tuple (%2 : $Float, %4 : $@callee_guaranteed (@in_guaranteed Float) -> @out Float)
  return %5 : $(Float, @callee_guaranteed (@in_guaranteed Float) -> @out Float)
}

/*
sil @make_diff_func : $@convention(thin) () -> (@convention(thin) (Float) -> Float, @convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float)) {
bb0:
  %orig = function_ref @foo : $@convention(thin) (Float) -> Float
  %vjp = function_ref @foo_vjp : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float)
  %diffFunc = autodiff_function [wrt 0] [order 1] %orig : $@convention(thin) (Float) -> Float with {undef : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float), %vjp : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float)}
  %extractedOrig = autodiff_function_extract [original] %diffFunc : $@differentiable @convention(thin) (Float) -> Float
  %extractedVJP = autodiff_function_extract [vjp] [order 1] %diffFunc : $@differentiable @convention(thin) (Float) -> Float
  %tuple = tuple (%extractedOrig : $@convention(thin) (Float) -> Float, %extractedVJP : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float))
  return %tuple : $(@convention(thin) (Float) -> Float, @convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float))
}
*/

sil @make_diff_func : $@convention(thin) () -> @differentiable @convention(thin) (Float) -> Float {
bb0:
  %orig = function_ref @foo : $@convention(thin) (Float) -> Float
  %undiffedFunc = autodiff_function [wrt 0] [order 1] %orig : $@convention(thin) (Float) -> Float
  %vjp = function_ref @foo_vjp : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float)
  %diffFunc = autodiff_function [wrt 0] [order 1] %orig : $@convention(thin) (Float) -> Float with {undef : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float), %vjp : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float)}
  %extractedVJP = autodiff_function_extract [vjp] [order 1] %diffFunc : $@differentiable @convention(thin) (Float) -> Float
  %extractedOriginal = autodiff_function_extract [original] %diffFunc : $@differentiable @convention(thin) (Float) -> Float
  return %undiffedFunc : $@differentiable @convention(thin) (Float) -> Float
}

// CHECK-LABEL: @make_diff_func : $@convention(thin) () -> @differentiable @convention(thin) (Float) -> Float
// CHECK:   [[FOO:%.*]] = function_ref @foo : $@convention(thin) (Float) -> Float
// CHECK:   [[UNDIFFED_FOO:%.*]] = autodiff_function [wrt 0] [order 1] [[FOO]] : $@convention(thin) (Float) -> Float
// CHECK:   [[FOO_VJP:%.*]] = function_ref @foo_vjp : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float)
// CHECK:   [[DIFFED_FOO:%.*]] = autodiff_function [wrt 0] [order 1] [[FOO]] : $@convention(thin) (Float) -> Float with {undef : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float), [[FOO_VJP]] : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float)}
// CHECK:   [[EXTRACTED_VJP:%.*]] = autodiff_function_extract [vjp] [order 1] [[DIFFED_FOO]] : $@differentiable @convention(thin) (Float) -> Float
// CHECK:   [[EXTRACTED_ORIG:%.*]] = autodiff_function_extract [original] [[DIFFED_FOO]] : $@differentiable @convention(thin) (Float) -> Float
// CHECK:   return [[UNDIFFED_FOO]] : $@differentiable @convention(thin) (Float) -> Float
