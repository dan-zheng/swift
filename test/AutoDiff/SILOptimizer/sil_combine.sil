// RUN: %target-sil-opt -enable-sil-verify-all %s -sil-combine | %FileCheck %s

// SILCombine tests for differentiation-related instructions.

sil_stage canonical

import Swift
import _Differentiation

// MARK: `differentiable_function_extract` folding

sil @differentiable_function_extract_orig : $@convention(thin) (@callee_guaranteed (Float) -> Float) -> (@callee_guaranteed (Float) -> Float) {
bb0(%orig : $@callee_guaranteed (Float) -> Float):
  %diff_fn = differentiable_function [parameters 0] [results 0] %orig : $@callee_guaranteed (Float) -> Float
  %extracted_orig = differentiable_function_extract [original] %diff_fn : $@callee_guaranteed @differentiable (Float) -> Float
  return %extracted_orig : $@callee_guaranteed (Float) -> Float
}

// CHECK-LABEL: sil @differentiable_function_extract_orig : $@convention(thin) (@callee_guaranteed (Float) -> Float) -> @callee_guaranteed (Float) -> Float {
// CHECK: bb0([[ORIG_FN:%.*]] : $@callee_guaranteed (Float) -> Float):
// CHECK:   return [[ORIG_FN]] : $@callee_guaranteed (Float) -> Float
// CHECK-LABEL: } // end sil function 'differentiable_function_extract_orig'

sil @differentiable_function_extract_jvp : $@convention(thin) (@callee_guaranteed (Float) -> Float, @callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)) -> (@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)) {
bb0(%orig : $@callee_guaranteed (Float) -> Float, %jvp : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)):
  %diff_fn = differentiable_function [parameters 0] [results 0] %orig : $@callee_guaranteed (Float) -> Float with_derivative {%jvp : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float), undef : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)}
  %extracted_jvp = differentiable_function_extract [jvp] %diff_fn : $@callee_guaranteed @differentiable (Float) -> Float
  return %extracted_jvp : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)
}

// CHECK-LABEL: sil @differentiable_function_extract_jvp : $@convention(thin) (@callee_guaranteed (Float) -> Float, @callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)) -> @callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float) {
// CHECK: bb0([[ORIG_FN:%.*]] : $@callee_guaranteed (Float) -> Float, [[JVP_FN:%.*]] : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)):
// CHECK:   return [[JVP_FN]] : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)
// CHECK-LABEL: } // end sil function 'differentiable_function_extract_jvp'

sil @differentiable_function_extract_vjp : $@convention(thin) (@callee_guaranteed (Float) -> Float, @callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)) -> (@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)) {
bb0(%orig : $@callee_guaranteed (Float) -> Float, %vjp : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)):
  %diff_fn = differentiable_function [parameters 0] [results 0] %orig : $@callee_guaranteed (Float) -> Float with_derivative {undef : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float), %vjp : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)}
  %extracted_vjp = differentiable_function_extract [vjp] %diff_fn : $@callee_guaranteed @differentiable (Float) -> Float
  return %extracted_vjp : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)
}

// CHECK-LABEL: sil @differentiable_function_extract_vjp : $@convention(thin) (@callee_guaranteed (Float) -> Float, @callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)) -> @callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float) {
// CHECK: bb0([[ORIG_FN:%.*]] : $@callee_guaranteed (Float) -> Float, [[VJP_FN:%.*]] : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)):
// CHECK:   return [[VJP_FN]] : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)
// CHECK-LABEL: } // end sil function 'differentiable_function_extract_vjp'

// Test `differentiatiable_function_extract [vjp] %diff_fn` where `%diff_fn` does not have a VJP function operand.
sil @differentiable_function_extract_vjp_undefined : $@convention(thin) (@callee_guaranteed (Float) -> Float) -> (@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)) {
bb0(%orig : $@callee_guaranteed (Float) -> Float):
  %diff_fn = differentiable_function [parameters 0] [results 0] %orig : $@callee_guaranteed (Float) -> Float
  %extracted_vjp = differentiable_function_extract [vjp] %diff_fn : $@callee_guaranteed @differentiable (Float) -> Float
  return %extracted_vjp : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)
}

// CHECK-LABEL: sil @differentiable_function_extract_vjp_undefined : $@convention(thin) (@callee_guaranteed (Float) -> Float) -> @callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float) {
// CHECK: bb0([[ORIG_FN:%.*]] : $@callee_guaranteed (Float) -> Float):
// CHECK:   [[DIFF_FN:%.*]] = differentiable_function [parameters 0] [results 0] [[ORIG_FN]] : $@callee_guaranteed (Float) -> Float
// CHECK:   [[EXTRACTED_VJP:%.*]] = differentiable_function_extract [vjp] [[DIFF_FN]] : $@differentiable @callee_guaranteed (Float) -> Float
// CHECK:   return [[EXTRACTED_VJP]] : $@callee_guaranteed (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)
// CHECK-LABEL: } // end sil function 'differentiable_function_extract_vjp_undefined'

// MARK: `linear_function_extract` folding

sil @linear_function_extract_orig : $@convention(thin) (@callee_guaranteed (Float) -> Float) -> (@callee_guaranteed (Float) -> Float) {
bb0(%orig : $@callee_guaranteed (Float) -> Float):
  %linear_fn = linear_function [parameters 0] %orig : $@callee_guaranteed (Float) -> Float
  %extracted_orig = linear_function_extract [original] %linear_fn : $@callee_guaranteed @differentiable(linear) (Float) -> Float
  return %extracted_orig : $@callee_guaranteed (Float) -> Float
}

// CHECK-LABEL: sil @linear_function_extract_orig : $@convention(thin) (@callee_guaranteed (Float) -> Float) -> @callee_guaranteed (Float) -> Float {
// CHECK: bb0([[ORIG_FN:%.*]] : $@callee_guaranteed (Float) -> Float):
// CHECK:   return [[ORIG_FN]] : $@callee_guaranteed (Float) -> Float
// CHECK-LABEL: } // end sil function 'linear_function_extract_orig'

sil @linear_function_extract_transpose : $@convention(thin) (@callee_guaranteed (Float) -> Float, @callee_guaranteed (Float) -> Float) -> @callee_guaranteed (Float) -> Float {
bb0(%orig : $@callee_guaranteed (Float) -> Float, %transpose : $@callee_guaranteed (Float) -> Float):
  %linear_fn = linear_function [parameters 0] %orig : $@callee_guaranteed (Float) -> Float with_transpose %transpose : $@callee_guaranteed (Float) -> Float
  %extracted_transpose = linear_function_extract [transpose] %linear_fn : $@callee_guaranteed @differentiable(linear) (Float) -> Float
  return %extracted_transpose : $@callee_guaranteed (Float) -> Float
}

// CHECK-LABEL: sil @linear_function_extract_transpose : $@convention(thin) (@callee_guaranteed (Float) -> Float, @callee_guaranteed (Float) -> Float) -> @callee_guaranteed (Float) -> Float {
// CHECK: bb0([[ORIG_FN:%.*]] : $@callee_guaranteed (Float) -> Float, [[TRANSPOSE_FN:%.*]] : $@callee_guaranteed (Float) -> Float):
// CHECK:   return [[TRANSPOSE_FN]] : $@callee_guaranteed (Float) -> Float
// CHECK-LABEL: } // end sil function 'linear_function_extract_transpose'

// Test `linear_function_extract [transpose] %linear_fn` where `%linear_fn` does not have a transpose function operand.
sil @linear_function_extract_transpose_undefined : $@convention(thin) (@callee_guaranteed (Float) -> Float) -> @callee_guaranteed (Float) -> Float {
bb0(%orig : $@callee_guaranteed (Float) -> Float):
  %linear_fn = linear_function [parameters 0] %orig : $@callee_guaranteed (Float) -> Float
  %extracted_transpose = linear_function_extract [transpose] %linear_fn : $@callee_guaranteed @differentiable(linear) (Float) -> Float
  return %extracted_transpose : $@callee_guaranteed (Float) -> Float
}

// CHECK-LABEL: sil @linear_function_extract_transpose_undefined : $@convention(thin) (@callee_guaranteed (Float) -> Float) -> @callee_guaranteed (Float) -> Float {
// CHECK: bb0([[ORIG_FN:%.*]] : $@callee_guaranteed (Float) -> Float):
// CHECK:   [[LINEAR_FN:%.*]] = linear_function [parameters 0] [[ORIG_FN]] : $@callee_guaranteed (Float) -> Float
// CHECK:   [[EXTRACTED_TRANSPOSE:%.*]] = linear_function_extract [transpose] [[LINEAR_FN]] : $@differentiable(linear) @callee_guaranteed (Float) -> Float
// CHECK:   return [[EXTRACTED_TRANSPOSE]] : $@callee_guaranteed (Float) -> Float
// CHECK-LABEL: } // end sil function 'linear_function_extract_transpose_undefined'
