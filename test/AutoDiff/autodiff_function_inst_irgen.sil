// RUN: %target-swift-frontend -emit-ir %s | %FileCheck %s

sil_stage raw

import Swift
import Builtin

// A pullback function mimicking those generated by the compiler.
// Parameters are a vector (vector-Jacobian products) and pullback struct value.
sil hidden @foo_pb : $@convention(thin) (@in_guaranteed Float, Float, Float) -> @out Float {
bb0(%0 : $*Float, %1 : $*Float, %2 : $Float, %3 : $Float):
  copy_addr %1 to %0 : $*Float
  %void = tuple ()
  return %void : $()
}

// The original function with an attribute that specifies the compiler-emitted pullback.
sil hidden [differentiable source 0 wrt 0 vjp @foo_vjp] @foo : $@convention(thin) (Float) -> Float {
bb0(%0 : $Float):
  return %0 : $Float
}

// The vector-Jacobian product function, which returns the original result and a pullback.
sil hidden @foo_vjp : $@convention(thin) (Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float) {
bb0(%0 : $*Float, %1 : $Float):
  %2 = function_ref @foo : $@convention(thin) (Float) -> Float
  %3 = apply %2(%1) : $@convention(thin) (Float) -> Float
  %4 = function_ref @foo_pb : $@convention(thin) (@in_guaranteed Float, Float, Float) -> @out Float
  %5 = partial_apply [callee_guaranteed] %4(%1, %3) : $@convention(thin) (@in_guaranteed Float, Float, Float) -> @out Float
  // %5 = tuple (%2 : $Float, %4 : $@callee_guaranteed (@in_guaranteed Float) -> @out Float)
  // return %5 : $(Float, @callee_guaranteed (@in_guaranteed Float) -> @out Float)
  store %3 to %0 : $*Float
  return %5 : $@callee_guaranteed (@in_guaranteed Float) -> @out Float
}

sil @make_diff_func : $@convention(thin) () -> (@convention(thin) (Float) -> Float, @convention(thin) (Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float)) {
bb0:
  %orig = function_ref @foo : $@convention(thin) (Float) -> Float
  %vjp = function_ref @foo_vjp : $@convention(thin) (Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float)
  %diffFunc = autodiff_function [wrt 0] [order 1] %orig : $@convention(thin) (Float) -> Float with {undef : $@convention(thin) (Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float), %vjp : $@convention(thin) (Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float)}
  %extractedOrig = autodiff_function_extract [original] %diffFunc : $@differentiable @convention(thin) (Float) -> Float
  %extractedVJP = autodiff_function_extract [vjp] [order 1] %diffFunc : $@differentiable @convention(thin) (Float) -> Float
  %tuple = tuple (%extractedOrig : $@convention(thin) (Float) -> Float, %extractedVJP : $@convention(thin) (Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float))
  return %tuple : $(@convention(thin) (Float) -> Float, @convention(thin) (Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float))
}

sil @caller : $@convention(thin) () -> () {
bb0:
  %f = function_ref @make_diff_func : $@convention(thin) () -> (@convention(thin) (Float) -> Float, @convention(thin) (Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float))
  %tuple = apply %f() : $@convention(thin) () -> (@convention(thin) (Float) -> Float, @convention(thin) (Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float))
  %vjp = tuple_extract %tuple : $(@convention(thin) (Float) -> Float, @convention(thin) (Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float)), 1
  %res = apply %vjp(undef, undef) : $@convention(thin) (Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float)
  %ret = tuple ()
  return %ret : $()
}

// CHECK-LABEL: swiftcc { i8*, i8* } @make_diff_func()
// CHECK-NEXT: entry:
// CHECK-NEXT:   ret { i8*, i8* } { i8* bitcast (float (float)* @foo to i8*), i8* bitcast ({ i8*, %swift.refcounted* } (%TSf*, float)* @foo_vjp to i8*) }

// CHECK-LABEL: swiftcc void @caller()
// CHECK-NEXT: entry:
// CHECK-NEXT:   [[RESULT_TUPLE:%.*]] = call swiftcc { i8*, i8* } @make_diff_func()
// CHECK:   [[VJP:%.*]] = extractvalue { i8*, i8* } [[RESULT_TUPLE]], 1
// CHECK:   [[VJP_TYPED:%.*]] = bitcast i8* [[VJP]] to { i8*, %swift.refcounted* } (%TSf*, float)*
// CHECK:   call swiftcc { i8*, %swift.refcounted* } [[VJP_TYPED]](%TSf* noalias nocapture undef, float undef)
