//===--- FloatingPointTypes.swift.gyb -------------------------*- swift -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftShims

%{
from SwiftFloatingPointTypes import all_floating_point_types

% for self_type in all_floating_point_types():
% Self = self_type.stdlib_name

%   if (srcBits == 80) and (bits != 80):
#if !(os(Windows) || os(Android)) && (arch(i386) || arch(x86_64))
%   end

// SWIFT_ENABLE_TENSORFLOW
//===----------------------------------------------------------------------===//
// VectorProtocol Conformance
//===----------------------------------------------------------------------===//

extension ${Self} : VectorProtocol {
  public typealias VectorSpaceScalar = ${Self}

  public func adding(_ x: ${Self}) -> ${Self} {
    self + x
  }

  public mutating func add(_ x: ${Self}) {
    self += x
  }

  public func subtracting(_ x: ${Self}) -> ${Self} {
    self - x
  }

  public mutating func subtract(_ x: ${Self}) {
    self -= x
  }

  public func scaled(by scalar: ${Self}) -> ${Self} {
    self * scalar
  }

  public mutating func scale(by scalar: ${Self}) {
    self *= scalar
  }
}

#endif
% end
% end # for bits in all_floating_point_types
